const mongoose=require("mongoose"),validator=require("validator"),bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),userSchema=new mongoose.Schema({firstname:{type:String,required:[!0,"Please provide your name"],minlength:4,maxlength:20,unique:!0},lastname:{type:String,required:[!0,"Please provide your name"],minlength:4,maxlength:20},email:{type:String,required:[!0,"Please provide your email"],validate:[validator.isEmail,"Please enter a valid email id"],unique:!0},password:{type:String,required:[!0,"Please Enter password"]}},{timestamps:!0});userSchema.pre("save",(async function(next){const salt=await bcrypt.genSalt(10);this.password=await bcrypt.hash(this.password,salt),next()})),userSchema.methods.createJWT=function(){return jwt.sign({userId:this._id,name:this.name},process.env.JWT_SECRET,{expiresIn:process.env.JWT_LIFETIME})},userSchema.methods.comparePassword=async function(candidatePassword){const isMatch=await bcrypt.compare(candidatePassword,this.password);return isMatch},module.exports=mongoose.model("User",userSchema);